{"version":3,"sources":["Components/TimeInput.jsx","Components/InputBlock.jsx","Components/Display.jsx","Components/Controls.jsx","Components/Main.jsx","Util/SetTimeFormat.js","Util/ids.js","App.js","serviceWorker.js","index.js"],"names":["TimeInput","currentTime","handleClick","dataBlock","ids","className","htmlFor","id","arrowUp","onClick","data-direction","data-block","arrowDown","time","InputBlock","mainLabel","Display","timeLeft","blockTime","Controls","turnOn","switchedOn","icon","Main","breakTime","sessionTime","handleReset","breakIds","sessionIds","preload","src","setTimeFormat","num","mins","Number","parseInt","seconds","resultMins","resultSeconds","setTimeMin","App","useState","setSessionTime","setBreakTime","setCurrentTime","setSwitchedOn","blockTimeRunnig","setBlockTimeRunnig","useEffect","audio","document","getElementById","interval","setInterval","console","log","play","clearInterval","e","block","target","dataset","direction","newTime","pause","Boolean","window","location","hostname","match","ReactDOM","render","StrictMode","navigator","serviceWorker","ready","then","registration","unregister","catch","error","message"],"mappings":"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","file":"static/js/main.3354b6b0.chunk.js","sourcesContent":["import React from \"react\";\r\n\r\nconst TimeInput = ({currentTime , handleClick,dataBlock,ids}) => {\r\n    return(\r\n        <div className = \"updating_block\" >\r\n            <label htmlFor=\"arrow\" id = {ids.arrowUp}  onClick = {handleClick} data-direction = \"up\" data-block = {dataBlock}>↑</label>\r\n            <label htmlFor=\"arrow\" id = {ids.arrowDown}  onClick = {handleClick} data-direction = \"down\" data-block = {dataBlock}>↓</label>\r\n            <p id = {ids.time} >{currentTime}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default TimeInput;","import React from \"react\";\r\nimport TimeInput from \"./TimeInput\";\r\n\r\nconst InputBlock = ({handleClick , currentTime, dataBlock, ids}) => {\r\n    return(\r\n        <div className = \"update_container\" >\r\n            <h4 id= {ids.mainLabel} > {dataBlock} Length</h4>\r\n            <TimeInput handleClick = {handleClick} currentTime = {currentTime} dataBlock = {dataBlock} ids = {ids}/>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default InputBlock;","import React from 'react';\r\n\r\nconst Display = ({timeLeft,blockTime}) => {\r\n    return (\r\n        <div id = \"display\">\r\n            <h4 id = \"timer-label\" >{blockTime}</h4>\r\n            <p id = \"time-left\" >{timeLeft}</p>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Display;","import React from \"react\";\r\n\r\nconst Controls = ({turnOn,switchedOn, handleClick}) => {\r\n    const icon = !switchedOn ? '►' : \"▌▌\";\r\n\r\n    return(\r\n        <div className = \"controls\" >\r\n            <label htmlFor=\"play\" id= \"start_stop\" onClick = {turnOn}>{icon}</label>\r\n            <label htmlFor=\"restar\" id =\"reset\" onClick = {handleClick}>⟳</label>\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Controls","import React from \"react\";\r\nimport Header from \"./Header\";\r\nimport InputBlock from \"./InputBlock\";\r\nimport Display from \"./Display\";\r\nimport Controls from \"./Controls\";\r\nimport Footer from \"./Footer\";\r\n\r\n\r\nconst Main = ({currentTime , handleClick , breakTime , sessionTime,ids , turnOn ,switchedOn , handleReset, blockTime }) => {\r\n    return(\r\n        <div className = \"container\" >\r\n            <InputBlock handleClick = {handleClick} currentTime = {breakTime} dataBlock = \"Break\" ids = {ids.breakIds} / >\r\n            <InputBlock handleClick = {handleClick} currentTime = {sessionTime} dataBlock = \"Session\" ids = {ids.sessionIds}/ >\r\n            <Display timeLeft= {currentTime} blockTime = {blockTime}/>\r\n            <Controls turnOn = {turnOn} switchedOn = {switchedOn} handleClick = {handleReset} />\r\n            <audio id=\"beep\" preload=\"auto\"\r\n            src=\"https://raw.githubusercontent.com/freeCodeCamp/cdn/master/build/testable-projects-fcc/audio/BeepSound.wav\"\r\n        />\r\n        </div>\r\n    )\r\n}\r\n\r\nexport default Main;\r\n\r\n\r\n","export function setTimeFormat(num){\r\n    const mins = Number.parseInt(num / 60);\r\n    const seconds = num % 60;\r\n\r\n    const resultMins = mins >= 10 ? \r\n                        `${mins}` : \r\n            (mins > 0 && mins < 10 ) ? \r\n                        `0${mins}` : \r\n                        `00`;\r\n    const resultSeconds = (seconds >= 0 && seconds < 10 ) ? `0${seconds}` : `${seconds}`;\r\n\r\n    return `${resultMins}:${resultSeconds}` \r\n}\r\n\r\nexport function setTimeMin(num){\r\n    const mins = Number.parseInt(num / 60);\r\n\r\n    return mins\r\n}","const ids = {\r\n    sessionIds : {\r\n        mainLabel : \"session-label\",\r\n        arrowDown : \"session-decrement\",\r\n        arrowUp : \"session-increment\",\r\n        time : \"session-length\"\r\n    },\r\n    breakIds : {\r\n        mainLabel : \"break-label\",\r\n        arrowDown : \"break-decrement\",\r\n        arrowUp : \"break-increment\",\r\n        time : \"break-length\"\r\n    },\r\n}\r\n\r\nexport default ids\r\n","import React , {useState,useEffect} from 'react';\nimport Main from './Components/Main';\nimport {setTimeFormat,setTimeMin} from './Util/SetTimeFormat';\nimport ids from './Util/ids';\n\nfunction App() {\n  const [sessionTime,setSessionTime] = useState(1500);\n  const [breakTime,setBreakTime] = useState(300);\n  const [currentTime , setCurrentTime ] = useState(1500);\n  const [switchedOn,setSwitchedOn] = useState(false);\n  const [blockTimeRunnig,setBlockTimeRunnig] = useState('Session');\n\n  useEffect(() => {\n    const audio = document.getElementById('beep');\n    if(switchedOn){\n      const interval = setInterval(() => {\n        console.log('This will run every second!');\n        setCurrentTime(currentTime => {\n          if(currentTime === 0 && blockTimeRunnig === 'Session'){\n            audio.currentTime = 0;\n            audio.play();\n            setBlockTimeRunnig('Break');\n            \n            return currentTime + breakTime;\n          \n          }else if(currentTime === 0 && blockTimeRunnig === 'Break'){\n            audio.currentTime = 0;\n            audio.play();\n            setBlockTimeRunnig('Session');\n\n            return currentTime + sessionTime;\n          }else{\n            return currentTime - 1;\n          }\n        });\n      }, 1000);\n      return () => clearInterval(interval);\n    }\n  }, [switchedOn,blockTimeRunnig,breakTime,sessionTime]);\n  \n  const updateLengthTime = (e) => {\n    const {block} = e.target.dataset;\n    const {direction} = e.target.dataset;\n\n    let newTime = block === \"Session\" ? sessionTime : breakTime;\n    \n    newTime = direction === 'up'?\n                                  newTime + 60 :\n                                  newTime - 60;\n\n    if(newTime < 60) newTime = 60; \n    if(newTime > 3600) newTime = 3600; \n    if(block === \"Session\" && blockTimeRunnig === 'Session'){\n      setSessionTime(newTime);\n      setCurrentTime(newTime);\n    }else if(block === \"Session\" && blockTimeRunnig === 'Break'){\n      setSessionTime(newTime);\n    }else if(block === \"Break\" && blockTimeRunnig === 'Break'){\n      setBreakTime(newTime);\n      setCurrentTime(newTime)\n    }else{\n      setBreakTime(newTime);\n    }\n\n  }\n\n  const turnOnApp = e => {\n    setSwitchedOn(!switchedOn);\n  }\n\n  const resetApp = e => {\n    setBreakTime(300);\n    setSessionTime(1500);\n    setCurrentTime(1500);\n    setSwitchedOn(false);\n    setBlockTimeRunnig('Session');\n    const audio = document.getElementById('beep');\n    audio.pause();\n    audio.currentTime = 0;\n  }\n  return (\n    <Main \n    sessionTime = {setTimeMin(sessionTime)}\n    breakTime = {setTimeMin(breakTime)}\n    currentTime = {setTimeFormat(currentTime)}\n    handleClick = {updateLengthTime}\n    turnOn = {turnOnApp} \n    ids = {ids}\n    switchedOn = {switchedOn}\n    handleReset = {resetApp}\n    blockTime = {blockTimeRunnig}\n    />\n  );\n}\n\nexport default App;\n","// This optional code is used to register a service worker.\n// register() is not called by default.\n\n// This lets the app load faster on subsequent visits in production, and gives\n// it offline capabilities. However, it also means that developers (and users)\n// will only see deployed updates on subsequent visits to a page, after all the\n// existing tabs open on the page have been closed, since previously cached\n// resources are updated in the background.\n\n// To learn more about the benefits of this model and instructions on how to\n// opt-in, read https://bit.ly/CRA-PWA\n\nconst isLocalhost = Boolean(\n  window.location.hostname === 'localhost' ||\n    // [::1] is the IPv6 localhost address.\n    window.location.hostname === '[::1]' ||\n    // 127.0.0.0/8 are considered localhost for IPv4.\n    window.location.hostname.match(\n      /^127(?:\\.(?:25[0-5]|2[0-4][0-9]|[01]?[0-9][0-9]?)){3}$/\n    )\n);\n\nexport function register(config) {\n  if (process.env.NODE_ENV === 'production' && 'serviceWorker' in navigator) {\n    // The URL constructor is available in all browsers that support SW.\n    const publicUrl = new URL(process.env.PUBLIC_URL, window.location.href);\n    if (publicUrl.origin !== window.location.origin) {\n      // Our service worker won't work if PUBLIC_URL is on a different origin\n      // from what our page is served on. This might happen if a CDN is used to\n      // serve assets; see https://github.com/facebook/create-react-app/issues/2374\n      return;\n    }\n\n    window.addEventListener('load', () => {\n      const swUrl = `${process.env.PUBLIC_URL}/service-worker.js`;\n\n      if (isLocalhost) {\n        // This is running on localhost. Let's check if a service worker still exists or not.\n        checkValidServiceWorker(swUrl, config);\n\n        // Add some additional logging to localhost, pointing developers to the\n        // service worker/PWA documentation.\n        navigator.serviceWorker.ready.then(() => {\n          console.log(\n            'This web app is being served cache-first by a service ' +\n              'worker. To learn more, visit https://bit.ly/CRA-PWA'\n          );\n        });\n      } else {\n        // Is not localhost. Just register service worker\n        registerValidSW(swUrl, config);\n      }\n    });\n  }\n}\n\nfunction registerValidSW(swUrl, config) {\n  navigator.serviceWorker\n    .register(swUrl)\n    .then(registration => {\n      registration.onupdatefound = () => {\n        const installingWorker = registration.installing;\n        if (installingWorker == null) {\n          return;\n        }\n        installingWorker.onstatechange = () => {\n          if (installingWorker.state === 'installed') {\n            if (navigator.serviceWorker.controller) {\n              // At this point, the updated precached content has been fetched,\n              // but the previous service worker will still serve the older\n              // content until all client tabs are closed.\n              console.log(\n                'New content is available and will be used when all ' +\n                  'tabs for this page are closed. See https://bit.ly/CRA-PWA.'\n              );\n\n              // Execute callback\n              if (config && config.onUpdate) {\n                config.onUpdate(registration);\n              }\n            } else {\n              // At this point, everything has been precached.\n              // It's the perfect time to display a\n              // \"Content is cached for offline use.\" message.\n              console.log('Content is cached for offline use.');\n\n              // Execute callback\n              if (config && config.onSuccess) {\n                config.onSuccess(registration);\n              }\n            }\n          }\n        };\n      };\n    })\n    .catch(error => {\n      console.error('Error during service worker registration:', error);\n    });\n}\n\nfunction checkValidServiceWorker(swUrl, config) {\n  // Check if the service worker can be found. If it can't reload the page.\n  fetch(swUrl, {\n    headers: { 'Service-Worker': 'script' },\n  })\n    .then(response => {\n      // Ensure service worker exists, and that we really are getting a JS file.\n      const contentType = response.headers.get('content-type');\n      if (\n        response.status === 404 ||\n        (contentType != null && contentType.indexOf('javascript') === -1)\n      ) {\n        // No service worker found. Probably a different app. Reload the page.\n        navigator.serviceWorker.ready.then(registration => {\n          registration.unregister().then(() => {\n            window.location.reload();\n          });\n        });\n      } else {\n        // Service worker found. Proceed as normal.\n        registerValidSW(swUrl, config);\n      }\n    })\n    .catch(() => {\n      console.log(\n        'No internet connection found. App is running in offline mode.'\n      );\n    });\n}\n\nexport function unregister() {\n  if ('serviceWorker' in navigator) {\n    navigator.serviceWorker.ready\n      .then(registration => {\n        registration.unregister();\n      })\n      .catch(error => {\n        console.error(error.message);\n      });\n  }\n}\n","import React from 'react';\nimport ReactDOM from 'react-dom';\nimport App from './App';\nimport * as serviceWorker from './serviceWorker';\n\nReactDOM.render(\n  <React.StrictMode>\n    <App />\n  </React.StrictMode>,\n  document.getElementById('root')\n);\n\n// If you want your app to work offline and load faster, you can change\n// unregister() to register() below. Note this comes with some pitfalls.\n// Learn more about service workers: https://bit.ly/CRA-PWA\nserviceWorker.unregister();\n"],"sourceRoot":""}